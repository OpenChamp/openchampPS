/* DO NOT EDIT THIS FILE DIRECTLY */

package config

import (
	"context"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/jackc/pgx/v5/pgxpool"
)

const (
	ListenAddr      = ":8080"
	ReadBufferSize  = 1024
	WriteBufferSize = 1024
	MaxConnections  = 1000000
	BaseGamePort    = 7000
	MaxGamePort     = 8000
)

// Database connection string construction
var dbConnString = func() string {
	if v := os.Getenv("DB_CONN"); v != "" {
		return v
	}
	host := os.Getenv("DB_HOST")
	if host == "" {
		host = "localhost"
	}
	port := os.Getenv("DB_PORT")
	if port == "" {
		port = "5432"
	}
	user := os.Getenv("DB_USER")
	if user == "" {
		user = "postgres"
	}
	pass := os.Getenv("DB_PASSWORD")
	if pass == "" {
		pass = "mypasswd1234"
	}
	db := os.Getenv("DB_NAME")
	if db == "" {
		db = "myappdb"
	}

	return fmt.Sprintf("postgres://%s:%s@%s:%s/%s", user, pass, host, port, db)
}()

func InitDBPool() (*pgxpool.Pool, error) {
	cfg, err := pgxpool.ParseConfig(dbConnString)
	if err != nil {
		return nil, err
	}

	cfg.MaxConns = 100
	cfg.MinConns = 10
	cfg.MaxConnLifetime = 1 * time.Hour
	cfg.MaxConnIdleTime = 30 * time.Minute
	cfg.HealthCheckPeriod = 1 * time.Minute

	pool, err := pgxpool.NewWithConfig(context.Background(), cfg)
	if err != nil {
		return nil, err
	}

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	if err := pool.Ping(ctx); err != nil {
		return nil, err
	}

	return pool, nil
}

func SetupDatabase(dbPool *pgxpool.Pool) error {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Create users table
	_, err := dbPool.Exec(ctx, `
		CREATE TABLE IF NOT EXISTS users (
			id SERIAL PRIMARY KEY,
			username VARCHAR(50) UNIQUE NOT NULL,
			password_hash VARCHAR(255) NOT NULL,
			email VARCHAR(255) UNIQUE,
			created_at TIMESTAMP NOT NULL DEFAULT NOW(),
			last_login TIMESTAMP
		)
	`)
	if err != nil {
		return fmt.Errorf("failed to create users table: %w", err)
	}

	// Create auth_tokens table
	_, err = dbPool.Exec(ctx, `
		CREATE TABLE IF NOT EXISTS auth_tokens (
			id SERIAL PRIMARY KEY,
			user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
			token VARCHAR(255) UNIQUE NOT NULL,
			ip_address VARCHAR(50),
			created_at TIMESTAMP NOT NULL DEFAULT NOW(),
			expires_at TIMESTAMP NOT NULL,
			last_used_at TIMESTAMP,
			is_revoked BOOLEAN NOT NULL DEFAULT FALSE
		)
	`)
	if err != nil {
		return fmt.Errorf("failed to create auth_tokens table: %w", err)
	}

	// Create indexes for faster lookups
	_, err = dbPool.Exec(ctx, `
		CREATE INDEX IF NOT EXISTS idx_auth_tokens_token ON auth_tokens(token);
		CREATE INDEX IF NOT EXISTS idx_auth_tokens_user_id ON auth_tokens(user_id);
	`)
	if err != nil {
		return fmt.Errorf("failed to create indexes: %w", err)
	}

	log.Println("Database tables initialized successfully")
	return nil
}